//Cameron Prince
//034_sort_club
//original 3/4/2014
//modified 3/5/2014
//SE 124.42

#include <iostream>
#include <fstream>
#include <string>
using namespace std;

void sort(int n);
void swap(string *p1, string *p2);

string *name, *type, *year;

int main()
{
system("color 0a");
int i, count = 0;
	string mem, ty, yr;
	ifstream fin ("E:\\data\\club.dat");
	while (! fin.eof()){
		fin >> mem >> ty >> yr;
		count++;
	}
	fin.close();

	//array  size the arrays
	name = new string [count];
	type = new string [count];
	year = new string [count];

	// load the arrays
	fin.open ("E:\\data\\club.dat");

	for (i = 0; i < count; i++){
		fin >> name[i] >> type[i] >> year[i];
	}
	fin.close();

	sort(count);

cout << "Array sorted.\n\n";

// output
for (i = 0; i < count; i++)
	cout << name[i] << "\t" << type[i] << "\t" << year[i] << "\n";
//delete the arrays
	delete [] name;
	delete [] type;
	delete [] year;
	cout << endl;
system ("pause");
return 0;
}

//function step 3 - the function definition
void sort(int n){ // n catches the 10 from the call
	int i, j, low; // local variables - only exists in the sort function
	 for (i = 0; i < n-1; i++){

		 low = i;

		 for (j = i+1; j < n; j++)
			 if (name[j] < name[low])
				low = j;

		if (i != low){ // Need a swap call for every array
			swap (&name[i], &name[low]); //call to the swap function- the address if a[i] will be caught by
		                          // the variale *p1 & the address of a[low] will be caught by *p2
			swap (&type[i], &type[low]);
			swap (&year[i], &year[low]);
		}
	 }
}

void swap (string *p1, string *p2) {
	string temp = *p1;
	*p1 = *p2;
	*p2 = temp;
}